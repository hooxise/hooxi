plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.21.0"
    alias(libs.plugins.springBootPlugin)
    alias(libs.plugins.springDepMgmtPlugin)
    alias(libs.plugins.springdocOpenApiPlugin)
    alias(libs.plugins.openapiGeneratorPlugin)
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2022.0.4"
    }
}

group = 'com.hooxi.config'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenLocal()
    mavenCentral()
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
    }
}

openApi {
    apiDocsUrl.set("http://localhost:12000/config/api/v1/v3/api-docs")
    outputDir.set(file("$buildDir/docs"))
    outputFileName.set("hooxi-config-swagger.yaml")
}

openApiGenerate {
    generatorName = "java"
    inputSpec = "$rootDir/build/docs/hooxi-config-swagger.yaml".toString()
    outputDir = "$rootDir/build/generated-client"
    invokerPackage = "{$group}.client"
    apiPackage = "{$group}.client.controllers"
    modelPackage = "{$group}.client.models"
    groupId = "$group"
    id = "client"
    version = "${version}"
    cleanupOutput = true
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation libs.r2dbcPostgresLib
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.hooxi.data.model:hooxi-data-model'
    //implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-config'
    implementation libs.springDocLib

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
}

test {
    useJUnitPlatform()
}


bootBuildImage {
    imageName = "docker.io/fusionswap/hooxi-config-server:${project.version}"
}

tasks.getByName('openApiGenerate').dependsOn(tasks.generateOpenApiDocs)
tasks.getByName('openApiGenerate').mustRunAfter(tasks.generateOpenApiDocs)